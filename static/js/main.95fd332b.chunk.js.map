{"version":3,"sources":["logo.svg","components/Camera/index.js","components/Canvas/index.js","components/useInterval.js","components/MotionDetector/index.js","App.js","serviceWorker.js","index.js","components/MotionDetector/index.module.css"],"names":["module","exports","__webpack_require__","p","WebcamComponent","_ref","onRef","hide","props","Object","objectWithoutProperties","webcamRef","useRef","_useState","useState","_useState2","slicedToArray","cameraReady","setCameraReady","setupCamera","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","e1","wrap","_context","prev","next","navigator","mediaDevices","getUserMedia","_this","setState","error_messages","current","video","onloadedmetadata","stop","apply","this","arguments","useEffect","react_default","createElement","react_webcam_default","assign","audio","ref","screenshotFormat","style","display","Canvas","onContext","_ref$contextType","contextType","mirrored","rest","canvasRef","ctx","getContext","transform","useInterval","callback","delay","savedCallback","id","setInterval","clearInterval","MotionDetector","setWebcamRef","_useState3","_useState4","setCtx","requestAnimationFrame","e","sampleSize","rgb","r","g","b","undefined","clamp","Math","round","value","min","max","w","window","innerWidth","h","innerHeight","canvas","height","width","drawImage","data","getImageData","y","x","pos","fillStyle","fillRect","drawPixelated","components_Canvas","className","styles","Camera","App","components_MotionDetector","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95fd332b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport Webcam from \"react-webcam\";\n\nconst WebcamComponent = ({ onRef, hide, ...props }) => {\n  const webcamRef = useRef();\n  const [cameraReady, setCameraReady] = useState(false);\n  const setupCamera = async () => {\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      const e1 =\n        \"Browser API navigator.mediaDevices.getUserMedia not available\";\n      this.setState({ error_messages: e1 });\n      throw e1;\n    }\n\n    const video = webcamRef.current.video;\n    video.onloadedmetadata = () => {\n      setCameraReady(true);\n    };\n  };\n\n  useEffect(() => {\n    setupCamera();\n  }, [webcamRef]);\n\n  if (cameraReady) {\n    onRef && onRef(webcamRef);\n  }\n\n  return (\n    <Webcam\n      audio={false}\n      ref={webcamRef}\n      screenshotFormat=\"image/jpeg\"\n      style={{ display: !hide ? \"block\" : \"none\" }}\n      {...props}\n    />\n  );\n};\n\nexport default WebcamComponent;\n","import React, { useRef, useEffect } from \"react\";\n\nconst Canvas = ({ onContext, contextType = \"2d\", mirrored, ...rest }) => {\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    if (canvasRef && onContext) {\n      const ctx = canvasRef.current.getContext(contextType);\n      onContext(ctx);\n    }\n  }, [canvasRef]);\n\n  return (\n    <canvas\n      {...rest}\n      style={{ transform: mirrored ? \"scale(-1,1)\" : \"scale(1)\" }}\n      ref={canvasRef}\n    />\n  );\n};\n\nexport default Canvas;\n","import { useEffect, useRef } from \"react\";\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React, { useRef, useState } from \"react\";\n\n// retoggle doesn't build properly for now (0.3.0)\n//import { Inspector, useRangeKnob, useBooleanKnob, useLog } from \"retoggle\";\n\nimport Webcam from \"../Camera\";\nimport Canvas from \"../Canvas\";\nimport useInterval from \"../useInterval\";\n\nimport styles from \"./index.module.css\";\n\nconst MotionDetector = () => {\n  // knobs\n  // const [pixelSize, setPixelSize] = useRangeKnob(\"Pixel Size\", {\n  //   initialValue: 50,\n  //   min: 10,\n  //   max: 200\n  // });\n  // const [range, setRange] = useRangeKnob(\"ms\", {\n  //   initialValue: 100,\n  //   min: 1,\n  //   max: 300\n  // });\n  // const [isRunning, setIsRunning] = useBooleanKnob(\"Motion Detect Mode\", false);\n  // useLog(\"Frame Redraw (ms)\", range);\n  // useLog(\"Pixel Size\", pixelSize);\n  // useLog(\"Motion Detection\", isRunning);\n\n  // the logic stuff\n  const [webcamRef, setWebcamRef] = useState();\n  const [ctx, setCtx] = useState();\n  const drawPixelated = (e, sampleSize) => {\n    function rgb(r, g, b) {\n      if (g === undefined) g = r;\n      if (b === undefined) b = r;\n      return (\n        \"rgb(\" +\n        clamp(Math.round(r), 0, 255) +\n        \", \" +\n        clamp(Math.round(g), 0, 255) +\n        \", \" +\n        clamp(Math.round(b), 0, 255) +\n        \")\"\n      );\n    }\n\n    function clamp(value, min, max) {\n      return Math.min(Math.max(value, Math.min(min, max)), Math.max(min, max));\n    }\n\n    const video = e.current.video;\n    //const ctx = canvasRef.current.getContext(\"2d\");\n    let w = window.innerWidth;\n    let h = window.innerHeight;\n    w = 640;\n    h = 480;\n\n    ctx.canvas.height = h;\n    ctx.canvas.width = w;\n\n    ctx.drawImage(video, 0, 0, w, h);\n\n    const data = ctx.getImageData(0, 0, w, h).data;\n\n    for (let y = 0; y < h; y += sampleSize) {\n      for (let x = 0; x < w; x += sampleSize) {\n        // the data array is a continuous array of red, blue, green\n        // and alpha values, so each pixel takes up four values\n        // in the array\n        var pos = (x + y * w) * 4;\n\n        const r = data[pos];\n        const g = data[pos + 1];\n        const b = data[pos + 2];\n\n        ctx.fillStyle = rgb(r, g, b);\n        ctx.fillRect(x, y, sampleSize, sampleSize);\n      }\n    }\n  };\n\n  useInterval(() => {\n    if (webcamRef) {\n      requestAnimationFrame(() => drawPixelated(webcamRef, 50));\n    }\n  }, 100);\n\n  return (\n    <div>\n      <p>Motion detector</p>\n      {/* <Inspector usePortal={true} /> */}\n      <Canvas className={styles.canvas} onContext={setCtx} mirrored />\n      <Webcam onRef={setWebcamRef} hide />\n    </div>\n  );\n};\n\nexport default MotionDetector;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport MotionDetector from \"./components/MotionDetector\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MotionDetector />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"MotionDetector_canvas__kaFLH\"};"],"sourceRoot":""}